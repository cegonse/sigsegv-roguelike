const textures = require("../src/textures")

describe("Packing texture files", () => {
  it("includes color format, width, height and pixel data", () => {
    const texture = textures.packTexture("test/data/texture.png");

    expect(texture.metadata).toEqual({
      id: "texture",
      format: "rgba32",
      height: 4,
      width: 4
    })
    expect([...texture.data]).toEqual([
      0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF,
      0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF,
      0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF,
      0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF,
    ])
    expect(texture.error).toBeUndefined();
  })

  it("rejects textures in unsupported formats", () => {
    const texture = textures.packTexture("test/data/unsupported_texture.png");

    expect(texture.error).toMatch(/(Unsupported format)/i)
    expect(texture.metadata).toBeUndefined()
    expect(texture.data).toBeUndefined()
  })

  it("fails when file does not exist", () => {
    const texture = textures.packTexture("nofile");

    expect(texture.error).toMatch(/(no such file or directory)/i)
    expect(texture.metadata).toBeUndefined()
    expect(texture.data).toBeUndefined()
  });

  // XX XX XX XX            Texture ID length (little endian 32 bit unsigned int)
  // [XX]                   Texture ID in ASCII (not NULL terminated)
  // XX                     Texture format (0x00=RGBA32)
  // XX XX XX XX            Texture width in pixels (little endian 32 bit unsigned int)
  // XX XX XX XX            Texture height in pixels (little endian 32 bit unsigned int)
  // XX XX XX XX            Texture data size (little endian 32 bit unsigned int)
  // [XX]                   Texture data, left to right, top to bottom
  it("can be read as a binary stream", () => {
    const texture = textures.packTexture("test/data/texture.png");

    expect([...texture.binary]).toEqual([
      0x07, 0x00, 0x00, 0x00,
      0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
      0x00,
      0x04, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00,
      0x40, 0x00, 0x00, 0x00,
      0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF,
      0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF,
      0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF,
      0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF,
    ])
  });
})
