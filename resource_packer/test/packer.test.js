const packer = require("../src/packer")

// Pack header
// 53 49 47 53 45 47 56   Magic (SIGSEGV)
// XX XX XX XX            Pack size in bytes excluding header (little endian 32 bit unsigned int)
// XX XX XX XX            Num textures (little endian 32 bit unsigned int)
//
// For each texture resource
// XX XX XX XX            Texture ID length (little endian 32 bit unsigned int)
// [XX]                   Texture ID in ASCII (not NULL terminated)
// XX                     Texture format (0x00=RGBA32)
// XX XX XX XX            Texture width in pixels (little endian 32 bit unsigned int)
// XX XX XX XX            Texture height in pixels (little endian 32 bit unsigned int)
// XX XX XX XX            Texture data size (little endian 32 bit unsigned int)
// [XX]                   Texture data, left to right, top to bottom

describe("Resource packer", () => {
  it("packs a resource pack with zero textures", () => {
    const result = packer.buildResourcePack([])

    expect([...result.buffer]).toEqual([
      0x53, 0x49, 0x47, 0x53, 0x45, 0x47, 0x56,
      0x04, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00
    ])
    expect(result.numResources).toEqual(0)
  })

  it("packs a resource pack with a texture", () => {
    const result = packer.buildResourcePack([
      "test/data/texture.png"
    ])

    expect([...result.buffer]).toEqual([
      0x53, 0x49, 0x47, 0x53, 0x45, 0x47, 0x56,
      0x5C, 0x00, 0x00, 0x00,
      0x01, 0x00, 0x00, 0x00,
      0x07, 0x00, 0x00, 0x00,
      0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65,
      0x00,
      0x04, 0x00, 0x00, 0x00,
      0x04, 0x00, 0x00, 0x00,
      0x40, 0x00, 0x00, 0x00,
      0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF,
      0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF,
      0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF,
      0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF, 0xAA, 0xBB, 0xCC, 0xFF,
    ])
    expect(result.textures.length).toEqual(1)
    expect(result.numResources).toEqual(1)
  })
})
